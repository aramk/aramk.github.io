<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Aram Kocharyan]]></title>
  <link href="http://aramk.com/atom.xml" rel="self"/>
  <link href="http://aramk.com/"/>
  <updated>2016-04-10T17:42:32+10:00</updated>
  <id>http://aramk.com/</id>
  <author>
    <name><![CDATA[Aram Kocharyan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hello Jekyll, Goodbye Wordpress]]></title>
    <link href="http://aramk.com/blog/2013/05/28/jekyll/"/>
    <updated>2013-05-28T00:00:00+10:00</updated>
    <id>http://aramk.com/blog/2013/05/28/jekyll</id>
    <content type="html"><![CDATA[<p>So my Wordpress site got hacked rather badly recently and 000webhost canceled my free hosting:</p>

<p><img src="http://aramk.com/assets/img/2013/05/site-down.png" alt="Site Down" /></p>

<p>Realising the amount of effort I put into writing templates, uploading huge amounts of files and using crappy FTP connections, I looked for a better way to post stuff.</p>

<p>Jekyll is a static website generator written in Ruby, is very light and didn&rsquo;t take nearly as much time to install, even though I had to set up DNS records again.</p>

<ol>
<li><p>Take a look at the <a href="https://github.com/aramkocharyan/aramkocharyan.github.io/tree/source">source branch</a> of this website.</p></li>
<li><p>Fork the repo and checkout both the <code>source</code> and <code>master</code> branches.</p></li>
<li><p>Make some changes to the site in the <code>source</code> branch and push them.</p></li>
<li><p>Run <a href="https://github.com/aramkocharyan/aramkocharyan.github.io/blob/source/publish.sh">publish.sh</a>, which will build the site in the <code>master</code> branch and push it.</p></li>
</ol>


<p>If you&rsquo;re hosting a <strong>Project Page</strong> instead of a <strong>User Page</strong>, you need to push to a <code>gh-pages</code> branch instead, so edit <code>publish.sh</code> to your needs. See the <a href="https://help.github.com/articles/user-organization-and-project-pages">GitHub Pages guide</a>.</p>

<p>This has some setbacks &ndash; even though I installed the Wordpress importer like so:</p>

<pre><code>sudo gem install jekyll-import --pre
</code></pre>

<p>And followed their <a href="http://jekyllrb.com/docs/migrations">importing guide</a>, my old posts are more or less broken. But I think cleaning them up will be a more long term solution, and I don&rsquo;t need a PHP server anymore :)</p>

<p>I plan to port <a href="https://github.com/aramkocharyan/crayon-syntax-highlighter">Crayon</a> eventually, but that&rsquo;s another story.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Minimizing Code in Crayon]]></title>
    <link href="http://aramk.com/blog/2013/01/15/minimizing-code-in-crayon/"/>
    <updated>2013-01-15T00:00:00+11:00</updated>
    <id>http://aramk.com/blog/2013/01/15/minimizing-code-in-crayon</id>
    <content type="html"><![CDATA[In the latest version of Crayon, you can choose to hide the code until the user expands it. This doesn&#8217;t apply to inline code. You can enable/disable it for individual Crayons using the Tag Editor.

<a href="http://localsite.com/ak/wp-content/uploads/2013/01/Screen-Shot-2013-01-15-at-9.57.16-PM.png"><img class="aligncenter size-full wp-image-1219" title="Screen Shot 2013-01-15 at 9.57.16 PM" alt="" src="http://localsite.com/ak/wp-content/uploads/2013/01/Screen-Shot-2013-01-15-at-9.57.16-PM.png" width="641" height="77" /></a>

If a title is set in the Tag Editor it is used in place of &#8220;Click To Expand Code&#8221;.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating a Simple Wordpress Widget]]></title>
    <link href="http://aramk.com/blog/2013/01/03/creating-a-simple-wordpress-widget/"/>
    <updated>2013-01-03T00:00:00+11:00</updated>
    <id>http://aramk.com/blog/2013/01/03/creating-a-simple-wordpress-widget</id>
    <content type="html"><![CDATA[Here&#8217;s a Wordpress widget base class which reduces the amount of code needed to create a simple widget with fields. Allows overriding a method adding more complex fields. This code should be placed in your theme&#8217;s function.php file. You can then subclass Field_Widget whenever you like by following the example given.

Thanks to <a href="http://frobert.com/en/2010/12/10/wordpress-widget-tutorial/">http://frobert.com/en/2010/12/10/wordpress-widget-tutorial/</a> for sharing tips on how to use WP_Widget.
<pre class="lang:php decode:true" data-url="https://gist.github.com/raw/4440762/f37cacc2bf1f675717f5a6481938a9b5dd862131/field_widget.php"></pre>
&nbsp;
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP: Sending an Email Attachment]]></title>
    <link href="http://aramk.com/blog/2012/12/30/php-sending-an-email-attachment/"/>
    <updated>2012-12-30T00:00:00+11:00</updated>
    <id>http://aramk.com/blog/2012/12/30/php-sending-an-email-attachment</id>
    <content type="html"><![CDATA[Here&#8217;s my adapted version of sending an email attachment and allowing HTML and plain encodings.
<pre class="lang:php decode:true  crayon-selected">emailFile(array(
    'to' =&gt; 'your@email.com',
    'from' =&gt; 'my@email.com',
    'subject' =&gt; 'Some Subject',
    'message' =&gt; '&lt;b&gt;Hello!&lt;/b&gt;',
    'plain ' =&gt; 'Get a new email client!',
    'file' =&gt; '/path/to/file'
));</pre>
<pre class="lang:php decode:true">/**
 * Sends an email in html and plain encodings with a file attachment.
 *
 * @param array $args Arguments associative array
 *      'to' (string)
 *      'from' (string)
 *      'subject' (optional string)
 *      'message' (HTML string)
 *      'plain' (optional plain string)
 *      'file' (optional file path of the attachment)
 * @see http://webcheatsheet.com/php/send_email_text_html_attachment.php
 */
function emailFile($args) {
    $to = set_default($args['to']);
    $from = set_default($args['from']);
    $subject = set_default($args['subject'], '');
    $message = set_default($args['message'], '');
    $plain = set_default($args['plain'], '');
    $file = set_default($args['file']);

    // MIME
    $random_hash = md5(date('r', time()));
    $boundaryMixed = 'PHP-mixed-' . $random_hash;
    $boundaryAlt = 'PHP-alt-' . $random_hash;
    $charset = 'UTF-8';
    $bits = '8bit';

    // Headers
    $headers = "MIME-Version: 1.0";
    $headers .= "Reply-To: $to\r\n";
    if ($from !== NULL) {
        $headers .= "From: $from\r\n";
    }
    $headers .= "Content-Type: multipart/mixed; boundary=$boundaryMixed";
    if ($file !== NULL) {
        $info = pathinfo($file);
        $filename = $info['filename'];
        $extension = $info['extension'];
        $contents = @file_get_contents($file);
        if ($contents === FALSE) {
            throw new Exception("File contents of '$file' could not be read");
        }
        $chunks = chunk_split(base64_encode($contents));
        $attachment = &lt;&lt;&lt;EOT
--$boundaryMixed
Content-Type: application/$extension; name=$filename.$extension
Content-Transfer-Encoding: base64
Content-Disposition: attachment

$chunks
EOT;
    } else {
        $attachment = '';
    }

    $body = &lt;&lt;&lt;EOT
--$boundaryMixed
Content-Type: multipart/alternative; boundary=$boundaryAlt

--$boundaryAlt
Content-Type: text/plain; charset="$charset"
Content-Transfer-Encoding: $bits

$plain

--$boundaryAlt
Content-Type: text/html; charset="$charset"
Content-Transfer-Encoding: $bits

$message
--$boundaryAlt--

$attachment

--$boundaryMixed--
EOT;

    $result = @mail($to, $subject, $body, $headers);
    return $result;
}

function set_default(&amp;$var, $default = NULL) {
    return isset($var) ? $var : $default;
}</pre>
&nbsp;
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP: Get Files in a Directory Recursively]]></title>
    <link href="http://aramk.com/blog/2012/12/30/php-get-files-in-a-directory-recursively/"/>
    <updated>2012-12-30T00:00:00+11:00</updated>
    <id>http://aramk.com/blog/2012/12/30/php-get-files-in-a-directory-recursively</id>
    <content type="html"><![CDATA[This is a method that will return an array of file paths from a directory. It&#8217;s contained within <a href="https://github.com/aramkocharyan/crayon-syntax-highlighter/blob/master/util/crayon_util.class.php" target="_blank">CrayonUtil</a> and calls other utility methods in that class, but can be ripped out if needed.
<pre class="lang:php decode:true">/**
 * @param $path A directory
 * @param array $args Argument array:
 *      hidden: If true, hidden files beginning with a dot will be included
 *      ignoreRef: If true, . and .. are ignored
 *      recursive: If true, this function is recursive
 *      ignore: An array of paths to ignore
 * @return array Files in the directory
 */
public static function getFiles($path, $args = array()) {
    $hidden = self::set_default($args['hidden'], TRUE);
    $ignoreRef = self::set_default($args['ignoreRef'], TRUE);
    $recursive = self::set_default($args['recursive'], FALSE);
    $ignore = self::set_default($args['ignore'], NULL);

    $ignore_map = array();
    if ($ignore) {
        foreach ($ignore as $i) {
            if (is_dir($i)) {
                $i = CrayonUtil::path_slash($i);
            }
            $ignore_map[$i] = TRUE;
        }
    }

    $files = glob($path . '*', GLOB_MARK);
    if ($hidden) {
        $files = array_merge($files, glob($path . '.*', GLOB_MARK));
    }
    if ($ignoreRef || $ignore) {
        $result = array();
        for ($i = 0; $i &lt; count($files); $i++) {
            $file = $files[$i];
            if (!isset($ignore_map[$file]) &amp;&amp; (!$ignoreRef || (basename($file) != '.' &amp;&amp; basename($file) != '..'))) {
                $result[] = $file;
                if ($recursive &amp;&amp; is_dir($file)) {
                    $result = array_merge($result, self::getFiles($file, $args));
                }
            }
        }
    } else {
        $result = $files;
    }
    return $result;
}</pre>
&nbsp;
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript: Generating a Readable Foreground Colour on any Background Colour]]></title>
    <link href="http://aramk.com/blog/2012/12/28/javascript-generating-a-readable-foreground-colour-on-any-background-colour/"/>
    <updated>2012-12-28T00:00:00+11:00</updated>
    <id>http://aramk.com/blog/2012/12/28/javascript-generating-a-readable-foreground-colour-on-any-background-colour</id>
    <content type="html"><![CDATA[This issue had been rolling around in my mind in the past but I never had to implement something like it before.

I had a text box where I set the background colour based on a colour picker but that meant that the text value would remain black - which wouldn&#8217;t be visible if the selected colour was also black, or even dark.
<div style="text-align: center;"><a href="http://localsite.com/ak/wp-content/uploads/2012/12/Screen-Shot-2012-12-28-at-3.40.07-PM.png"><img class="size-full wp-image-1104" title="Screen Shot 2012-12-28 at 3.40.07 PM" src="http://localsite.com/ak/wp-content/uploads/2012/12/Screen-Shot-2012-12-28-at-3.40.07-PM.png" alt="" width="163" height="30" /></a><a href="http://localsite.com/ak/wp-content/uploads/2012/12/Screen-Shot-2012-12-28-at-3.39.55-PM.png"><img class="size-full wp-image-1105" title="Screen Shot 2012-12-28 at 3.39.55 PM" src="http://localsite.com/ak/wp-content/uploads/2012/12/Screen-Shot-2012-12-28-at-3.39.55-PM.png" alt="" width="167" height="30" /></a></div>
My solution was to pick a colour that differed as much as possible from black - white - and apply this methodology with all colours. If our background was white, then I would use black as the foreground. For colours in between I used a threshold - as soon as the background colour passed it (as it became darker), I would change the foreground from black to white (making it lighter).

I believe the best foreground should be either white or black, since it should differ from the background as much as possible - so linear interpolation between black and white wouldn&#8217;t help here.

My method was to calculate a distance from white, which is the origin at (0,0). The x-axis is <strong>saturation</strong> and the y-axis is <strong>(1 - value)</strong> in the <a href="http://en.wikipedia.org/wiki/HSL_and_HSV" target="_blank">HSV model</a>. Using a threshold amount of 0.5, I created a radius around white where my foreground is black. Any position outside this radius means my foreground is white. By using multipliers I was able to create an ellipse shape to my liking.

<a href="http://localsite.com/ak/wp-content/uploads/2012/12/1.png"><img class="aligncenter size-full wp-image-1097" title="1" src="http://localsite.com/ak/wp-content/uploads/2012/12/1.png" alt="" width="256" height="256" /></a>

I ran into another issue - for colours that appear light - yellow, green, light blue - I needed to allow more black. So I stretched the radius in the x-axis for these colours.

<a href="http://localsite.com/ak/wp-content/uploads/2012/12/2.png"><img class="aligncenter size-full wp-image-1098" title="2" src="http://localsite.com/ak/wp-content/uploads/2012/12/2.png" alt="" width="256" height="256" /></a>

This methodology is generic enough to be applied anywhere this problem comes up, but for my implementation I used <a href="http://jquery.com/" target="_blank">jQuery</a> and <a href="http://bgrins.github.com/TinyColor/" target="_blank">TinyColor</a>.

See an <strong>online demo</strong> here: <a href="http://aramkocharyan.github.com/readable-color/index.html" target="_blank">http://aramkocharyan.github.com/readable-color/index.html</a>
Grab the <strong>source</strong>: <a href="https://github.com/aramkocharyan/readable-color/" target="_blank">https://github.com/aramkocharyan/readable-color/</a>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP: array_flip() with Values Containing Arrays]]></title>
    <link href="http://aramk.com/blog/2012/12/27/php-array_flip-with-values-containing-arrays/"/>
    <updated>2012-12-27T00:00:00+11:00</updated>
    <id>http://aramk.com/blog/2012/12/27/php-array_flip-with-values-containing-arrays</id>
    <content type="html"><![CDATA[I had the following:
<pre class="lang:php decode:true">$attributeTypes = array(
    'color' =&gt; array('background', 'border-color'),
    'size' =&gt; array('border-width')
);
$attributeTypesInverse = array_flip($attributeTypes);</pre>
But I got this warning: Warning: array_flip() [function.array-flip]: Can only flip STRING and INTEGER values!

So I wrote a new function to support arrays as values, not just integers or strings. Keep in mind though that the values of the arrays in values must be integers or strings in order to be valid keys for the resulting array.
<pre class="lang:php decode:true">function array_flip_r($array) {
    $result = array();
    foreach ($array as $k=&gt;$v) {
        if (is_array($v)) {
            foreach ($v as $u) {
                _array_flip_r($result, $k, $u);
            }
        } else {
            _array_flip_r($result, $k, $v);
        }
    }
    return $result;
}

function _array_flip_r(&amp;$array, $k, $v) {
    if (is_string($v) || is_int($v)) {
        $array[$v] = $k;
    } else {
        trigger_error("Values must be STRING or INTEGER", E_USER_WARNING);
    }
}</pre>
&nbsp;
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Crayon Theme Editor]]></title>
    <link href="http://aramk.com/blog/2012/12/27/crayon-theme-editor/"/>
    <updated>2012-12-27T00:00:00+11:00</updated>
    <id>http://aramk.com/blog/2012/12/27/crayon-theme-editor</id>
    <content type="html"><![CDATA[The Theme Editor allows you to duplicate and modify custom themes compatible with Crayon using an integrated user interface and <em>no CSS knowledge</em> whatsoever. Of course, make changes to your theme by editing the CSS is also possible before and after using the theme editor.

You can access the theme editor in Wordpress admin under <strong>Settings &gt; Crayon</strong>:

<a href="http://localsite.com/ak/wp-content/uploads/2012/12/Screen-Shot-2013-01-02-at-1.44.40-AM.png"><img class="aligncenter size-full wp-image-1138" title="Screen Shot 2013-01-02 at 1.44.40 AM" src="http://localsite.com/ak/wp-content/uploads/2012/12/Screen-Shot-2013-01-02-at-1.44.40-AM.png" alt="" width="756" height="236" /></a>

The Theme section displays the information about the current theme, a toolbar for performing theme editor actions and the Live Preview. Modifying any settings automatically refreshes this preview before submitting the settings page.
<h2>Theme Types</h2>
Crayon stores the <strong>Stock Themes</strong> which come with the plugin under this path:

<code>wp-content/plugins/crayon-syntax-highlighter/themes</code>

To allow modifying these themes and preserving changes, Crayon stores <strong>User Themes</strong> under this path:

<code>wp-content/uploads/crayon-syntax-highlighter/themes</code>

This avoids any changes being overwritten during updates to the plugin. Stock themes can&#8217;t be deleted or modified for this reason - unless you enable <code>CRAYON_DEBUG</code> in <code>globals.php</code>. Of course, modifying the theme CSS is independent of the Theme Editor, but keep in mind that your changes will be lost when updating the plugin.
<h2>Creating Themes</h2>
Start by selecting an existing theme which is the closest appearance you&#8217;re trying to create. To play it safe, start with the Classic theme. Click Duplicate and type in a new name.

<a href="http://localsite.com/ak/wp-content/uploads/2012/12/Screen-Shot-2012-12-30-at-12.54.10-AM.png"><img class="aligncenter size-full wp-image-1110" title="Screen Shot 2012-12-30 at 12.54.10 AM" src="http://localsite.com/ak/wp-content/uploads/2012/12/Screen-Shot-2012-12-30-at-12.54.10-AM.png" alt="" width="280" height="160" /></a>

The theme is duplicated as a User Theme. Now click Edit to load the Theme Editor.

<a href="http://localsite.com/ak/wp-content/uploads/2012/12/Screen-Shot-2012-12-30-at-1.01.26-AM.png"><img class="aligncenter size-full wp-image-1112" title="Screen Shot 2012-12-30 at 1.01.26 AM" src="http://localsite.com/ak/wp-content/uploads/2012/12/Screen-Shot-2012-12-30-at-1.01.26-AM.png" alt="" width="785" height="339" /></a>

One handy feature of the editor is that modifications take place live just like in the regular settings page - so changing the language or settings will also change them in the theme editor, allowing you to see how your changes will look like for different settings.

On the right side you&#8217;ll see the editor controls. The first tab allows you to change information about the theme. Saving the theme is possible at any time and doesn&#8217;t require a reload unless you change the name of the theme. You can also look at the CSS with a link below the name.

Next, I might want to change the appearance of the frame and line colours.

<a href="http://localsite.com/ak/wp-content/uploads/2012/12/Screen-Shot-2012-12-30-at-1.06.39-AM.png"><img class="aligncenter size-full wp-image-1113" title="Screen Shot 2012-12-30 at 1.06.39 AM" src="http://localsite.com/ak/wp-content/uploads/2012/12/Screen-Shot-2012-12-30-at-1.06.39-AM.png" alt="" width="781" height="288" /></a>

<a href="http://localsite.com/ak/wp-content/uploads/2012/12/Screen-Shot-2012-12-30-at-1.07.43-AM.png"><img class="aligncenter size-full wp-image-1114" title="Screen Shot 2012-12-30 at 1.07.43 AM" src="http://localsite.com/ak/wp-content/uploads/2012/12/Screen-Shot-2012-12-30-at-1.07.43-AM.png" alt="" width="779" height="375" /></a>

Next, I can change the line numbers.

<a href="http://localsite.com/ak/wp-content/uploads/2012/12/Screen-Shot-2012-12-30-at-1.19.57-AM.png"><img class="aligncenter size-full wp-image-1115" title="Screen Shot 2012-12-30 at 1.19.57 AM" src="http://localsite.com/ak/wp-content/uploads/2012/12/Screen-Shot-2012-12-30-at-1.19.57-AM.png" alt="" width="777" height="549" /></a>

And then the toolbar.

<a href="http://localsite.com/ak/wp-content/uploads/2012/12/Screen-Shot-2012-12-30-at-1.55.15-AM.png"><img class="aligncenter size-full wp-image-1116" title="Screen Shot 2012-12-30 at 1.55.15 AM" src="http://localsite.com/ak/wp-content/uploads/2012/12/Screen-Shot-2012-12-30-at-1.55.15-AM.png" alt="" width="780" height="409" /></a>

Finally, we can take a look at the highlighting! I&#8217;ve left this till last since I wanted to make sure I have the overall look of the new theme first.

<a href="http://localsite.com/ak/wp-content/uploads/2012/12/Screen-Shot-2012-12-30-at-2.03.45-AM.png"><img class="aligncenter size-full wp-image-1118" title="Screen Shot 2012-12-30 at 2.03.45 AM" src="http://localsite.com/ak/wp-content/uploads/2012/12/Screen-Shot-2012-12-30-at-2.03.45-AM.png" alt="" width="778" height="750" /></a>

And there we have it, a new theme! Tinker with the settings until you have the right look. This theme is obviously a 5 minute demonstration and the some of the stock themes that people have put together look amazing comparatively - but the important thing to take away from this post is that creating themes is now super quick and very much integrated into Crayon!
<h2>Submitting a Theme</h2>
Remember, if you happen to create a theme you&#8217;re especially proud of, please use the <strong>Submit</strong> button - it will zip up your theme and email it to me and I&#8217;ll include it as a Stock Theme for others to enjoy!
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Crayon with Retina Support]]></title>
    <link href="http://aramk.com/blog/2012/12/14/crayon-with-retina-support/"/>
    <updated>2012-12-14T00:00:00+11:00</updated>
    <id>http://aramk.com/blog/2012/12/14/crayon-with-retina-support</id>
    <content type="html"><![CDATA[Crayon 1.17 beta adds retina support for the buttons in the toolbar on high resolution devices.

[caption id=&#8221;attachment_1081&#8221; align=&#8221;aligncenter&#8221; width=&#8221;556&#8221;]<a href="http://localsite.com/ak/wp-content/uploads/2012/12/non-retina.png"><img class="size-full wp-image-1081" title="non-retina" src="http://localsite.com/ak/wp-content/uploads/2012/12/non-retina.png" alt="" width="556" height="97" /></a> Before[/caption]

[caption id=&#8221;attachment_1082&#8221; align=&#8221;aligncenter&#8221; width=&#8221;556&#8221;]<a href="http://localsite.com/ak/wp-content/uploads/2012/12/retina.png"><img class="size-full wp-image-1082" title="retina" src="http://localsite.com/ak/wp-content/uploads/2012/12/retina.png" alt="" width="556" height="97" /></a> After[/caption]
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Resources Loaded in Crayon]]></title>
    <link href="http://aramk.com/blog/2012/12/10/resources-loaded-in-crayon/"/>
    <updated>2012-12-10T00:00:00+11:00</updated>
    <id>http://aramk.com/blog/2012/12/10/resources-loaded-in-crayon</id>
    <content type="html"><![CDATA[I&#8217;ve made Crayon with modularity in mind to allow reuse of any components if needed. Here are the Javascript components:
<ul>
	<li>js/util.js</li>
	<li>js/crayon.js</li>
	<li>js/jquery.popup.js</li>
	<li>js/fancybox/jquery.fancybox.init.pack.js</li>
	<li>js/fancybox/fancybox_init.js</li>
	<li>util/tag-editor/crayon_te.js</li>
</ul>
`util.js` has several JavaScript methods that are shared across the admin settings, tag editor, theme editor (coming soon) and of course the front end which displays the Crayons.

`crayon.js` is the main script which defines the toolbar button events and other settings, like toggling etc.

`jquery.popup.js` is adapted jquery plugin I use to open a code popup. As of the latest beta commit, disabling the popup now removes this resource.

`jquery.fancybox.init.pack.js` is a custom version of Fancybox I modified to allow passing in <a href="http://localsite.com/ak/crayon/initialising-fancybox-with-custom-objects/">my own fancybox instance</a> without disrupting other fancybox plugins that may be running - <a href="http://localsite.com/ak/projects/crayon-syntax-highlighter/#comment-720709080">otherwise errors occur</a>.

`fancybox_init.js` serves only the purpose of kickstarting Fancybox with my custom objects, and I agree this is somewhat wasteful of a single request. Although it&#8217;ll take less time to transfer than a larger file, I imagine there&#8217;s a fixed cost in the latency required to make the request. Mostly for the reason of reducing the number of modules needed, I&#8217;ve removed it in the latest beta commit and placed it in util.js.

`crayon_te.js` is the tag editor. This appears in the front end only if you check &#8220;Display the Tag Editor in any TinyMCE instances on the frontend (e.g. bbPress)&#8221; - which is off since 1.15 on fresh installs. Having &#8220;Attempt to load Crayon&#8217;s CSS and JavaScript only when needed&#8221; still needs TinyMCE to be disabled on the front end as <a href="http://localsite.com/ak/php/loading-css-and-javascript-only-when-required-in-a-wordpress-plugin/">I&#8217;ve now mentioned here</a>.

For CSS:
<ul>
	<li>css/crayon_style.css</li>
	<li>css/global_style.css</li>
	<li>js/fancybox/jquery.fancybox.css</li>
	<li>themes/classic/classic.css</li>
	<li>fonts/monaco.css</li>
</ul>
`crayon_style.css` is a the foundation style.
`global_style.css` are styles shared across the admin and front end (such as the tag editor, which can appear anywhere TinyMCE appears).
`jquery.fancybox.css` is once again for Fancybox and only loads if the Tag Editor is enabled on the front end.
`classic.css` is the classic theme. `monaco.css` is the default font. Since there can be any combination of the last two, mixing them is not practical.

By far the best technique to reduce the number of requests is to use <a href="http://wordpress.org/extend/plugins/w3-total-cache/" target="_blank">WP Total Cache</a>, which I have ensured Crayon is compatible with since 1.16. This will reduce the JS and CSS to a single file for the entire site. This allows the developer (me) to create modular and reusable components while allowing the client (you) and end users to experience better efficiency. Hope that helps!
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Expanding code beyond page boundaries in Crayon]]></title>
    <link href="http://aramk.com/blog/2012/12/04/expanding-code-beyond-page-boundaries-in-crayon/"/>
    <updated>2012-12-04T00:00:00+11:00</updated>
    <id>http://aramk.com/blog/2012/12/04/expanding-code-beyond-page-boundaries-in-crayon</id>
    <content type="html"><![CDATA[In <a href="http://github.com/aramkocharyan/crayon-syntax-highlighter/" target="_blank">1.16</a> I&#8217;ve added the ability to expand the code beyond the page border by setting it as large as it needs to be to accomodate the code within. Enable the setting &#8220;Expand code beyond page borders on mouseover&#8221; under Settings &gt; Crayon &gt; Code, which is disabled by default.

<a href="http://localsite.com/ak/wp-content/uploads/2012/12/Screen-Shot-2012-12-04-at-5.14.47-PM.png"><img class="aligncenter size-full wp-image-1065" title="Screen Shot 2012-12-04 at 5.14.47 PM" src="http://localsite.com/ak/wp-content/uploads/2012/12/Screen-Shot-2012-12-04-at-5.14.47-PM.png" alt="" width="687" height="268" /></a>

<a href="http://localsite.com/ak/wp-content/uploads/2012/12/Screen-Shot-2012-12-04-at-5.15.13-PM.png"><img class="aligncenter size-full wp-image-1066" title="Screen Shot 2012-12-04 at 5.15.13 PM" src="http://localsite.com/ak/wp-content/uploads/2012/12/Screen-Shot-2012-12-04-at-5.15.13-PM.png" alt="" width="682" height="442" /></a>

I&#8217;ve also added a new toggle which expands and contracts.

<a href="http://localsite.com/ak/wp-content/uploads/2012/12/Screen-Shot-2012-12-06-at-12.34.36-AM.png"><img class="aligncenter size-full wp-image-1069" title="Screen Shot 2012-12-06 at 12.34.36 AM" src="http://localsite.com/ak/wp-content/uploads/2012/12/Screen-Shot-2012-12-06-at-12.34.36-AM.png" alt="" width="206" height="91" /></a>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using different versions of Fancybox on the same page]]></title>
    <link href="http://aramk.com/blog/2012/11/28/initialising-fancybox-with-custom-objects/"/>
    <updated>2012-11-28T00:00:00+11:00</updated>
    <id>http://aramk.com/blog/2012/11/28/initialising-fancybox-with-custom-objects</id>
    <content type="html"><![CDATA[I ran into the issue where some users had an older version of Fancybox on their sites and needed to provide my own version to work with <a href="http://wordpress.org/extend/plugins/crayon-syntax-highlighter/" target="_blank">Crayon</a>. So I put together <a href="https://github.com/aramkocharyan/fancyBox/blob/master/source/jquery.fancybox.init.pack.js" target="_blank">a modification of the original script</a> which allows you to initialise Fancybox when you need it and with different objects to what it&#8217;s usually provided.

By default, Fancybox will apply these once the script is loaded: <code>(window, document, jQuery)</code>

And it will initialise <code>jQuery.fancybox</code>. If I want to have my own version running independently, I&#8217;d need to provide it with a jQuery instance and a custom attribute name, say &#8220;crayonFancybox&#8221; so I can use my version without accidentally using the old Fancybox on some users&#8217; Wordpress installs.
<pre class="lang:js decode:true">window.fancyboxInit = function (window, document, $, fancybox, undefined) {
// Original Fancybox script content goes here
};</pre>
Now if you include jQuery and two different Fancybox scripts in the same page, they won&#8217;t clash:
<pre class="lang:xhtml mark:12,13 decode:true">&lt;script type='text/javascript' src='http://code.jquery.com/jquery.min.js'&gt;&lt;/script&gt;
&lt;script type='text/javascript' src='http://yandex.st/jquery/fancybox/1.3.4/jquery.fancybox.min.js'&gt;&lt;/script&gt;
&lt;script src="https://raw.github.com/aramkocharyan/fancyBox/master/source/jquery.fancybox.init.pack.js" type="text/javascript"&gt;&lt;/script&gt;

&lt;script type="text/javascript"&gt;

var jQueryCrayon = jQuery;
fancyboxInit(window, document, jQueryCrayon, 'crayonFancybox');

(function($) {
	$(document).ready(function() {
		console.log("old", $.fancybox); // Old version
		console.log("new", $.crayonFancybox); // My new version
	});
})(jQueryCrayon);

&lt;/script&gt;

&lt;body&gt;

See the JS console!

&lt;/body&gt;</pre>
The only downside is that you must use <code>$(elem).crayonFancybox</code> instead of <code>$(elem).fancybox</code> in your scripts.

See a <a href="http://jsfiddle.net/ZmmCp/" target="_blank">demo</a>, and <a href="https://github.com/aramkocharyan/fancyBox/blob/master/source/jquery.fancybox.init.pack.js" target="_blank">download the script</a>.

&nbsp;

&nbsp;
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript Hexidecimal Colours]]></title>
    <link href="http://aramk.com/blog/2012/10/02/javascript-hexidecimal-colours/"/>
    <updated>2012-10-02T00:00:00+10:00</updated>
    <id>http://aramk.com/blog/2012/10/02/javascript-hexidecimal-colours</id>
    <content type="html"><![CDATA[<pre class="lang:js decode:true " data-url="https://raw.github.com/gist/3816183/6be177ea38297e45f173e2e6ca310df960360dd0/hex.js"></pre>
&nbsp;
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Internal Post Management in Crayon]]></title>
    <link href="http://aramk.com/blog/2012/09/26/internal-post-management-crayon/"/>
    <updated>2012-09-26T00:00:00+10:00</updated>
    <id>http://aramk.com/blog/2012/09/26/internal-post-management-crayon</id>
    <content type="html"><![CDATA[Crayon&#8217;s internal post management determines when the rest of the system should kick in.

When you save/edit a page, Crayon searches through the content and keeps a reference to the post in the database if it contains any Crayon tags. When you save/edit a comment, the same process takes place.

When you load a page, Crayon goes through all the posts requested (for a single page, this is usually just a single post) and only checks those known to contain Crayon posts. For each of these, Crayon captures any tags used and keeps them in internal PHP memory.

When the page or comment content is requested by Wordpress, Crayon steps in, highlights the code in the tags it captured earlier and replaces the original tags in the content.

This means that <strong>only those pages that contain Crayons are ever checked for Crayons</strong>, meaning much more efficient than looking through every single post on the blog for Crayon tags!

In Crayon 1.12, I&#8217;ve added a feature in the settings page to display all the posts that contain Crayon tags. It will also list all the posts which have Crayon tags in their comments, even if the post itself doesn&#8217;t contain any. This is crucial to ensure Crayon kicks in and highlights the code in those comments.

<a href="http://localsite.com/ak/wp-content/uploads/2012/09/Screen-Shot-2012-09-26-at-6.40.57-PM.png"><img class="aligncenter size-full wp-image-1022" title="Screen Shot 2012-09-26 at 6.40.57 PM" src="http://localsite.com/ak/wp-content/uploads/2012/09/Screen-Shot-2012-09-26-at-6.40.57-PM.png" alt="" width="307" height="49" /></a>

<a href="http://localsite.com/ak/wp-content/uploads/2012/09/Screen-Shot-2012-09-26-at-6.41.03-PM.png"><img class="aligncenter size-full wp-image-1023" title="Screen Shot 2012-09-26 at 6.41.03 PM" src="http://localsite.com/ak/wp-content/uploads/2012/09/Screen-Shot-2012-09-26-at-6.41.03-PM.png" alt="" width="502" height="283" /></a>

As an added safety measure, when you refresh the settings page, Crayon will manually go through all the posts in your site and update the list of those containing Crayons in the database. So if anything funky happens that somehow messes up this list, refreshing the settings page should sort it out.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Converting Legacy Tags to Pre Tags]]></title>
    <link href="http://aramk.com/blog/2012/09/26/converting-legacy-tags-to-pre/"/>
    <updated>2012-09-26T00:00:00+10:00</updated>
    <id>http://aramk.com/blog/2012/09/26/converting-legacy-tags-to-pre</id>
    <content type="html"><![CDATA[If you&#8217;ve been using Crayon Mini Tags or other syntax highlighters with syntax like:

<code>[php title="testing"]some code[/php]</code>

Or any other legacy Crayon tags:

<code>$[crayon lang="php" title="testing"]some code[/crayon]</code>

Then you might like to convert your blog&#8217;s old code format into a better standard:

<code>&lt;pre class="lang:php decode:true" title="Testing"&gt;some code&lt;/pre&gt;</code>

The benefits are backwards compatibility (if Crayon is disabled or you use another highlighter) and the ability to use the <a href="http://localsite.com/ak/projects/crayon-tag-editor/" target="_blank">Crayon Tag Editor</a> in the visual editor of Wordpress).

<em>Note:</em> decode:true means that the code is encoded, so any &lt; characters in the visual editor are really &amp;lt; in the HTML editor to ensure they are valid HTML entities.

Say I have this in Wordpress, switching to the HTML editor:

<a href="http://localsite.com/ak/wp-content/uploads/2012/09/Screen-Shot-2012-09-26-at-12.04.07-AM.png"><img class="aligncenter size-full wp-image-1007" title="Screen Shot 2012-09-26 at 12.04.07 AM" src="http://localsite.com/ak/wp-content/uploads/2012/09/Screen-Shot-2012-09-26-at-12.04.07-AM.png" alt="" width="675" height="139" /></a>

From Crayon 1.12 there is a new setting in the admin:

<a href="http://localsite.com/ak/wp-content/uploads/2012/09/Screen-Shot-2012-09-26-at-12.04.16-AM.png"><img class="aligncenter size-full wp-image-1009" title="Screen Shot 2012-09-26 at 12.04.16 AM" src="http://localsite.com/ak/wp-content/uploads/2012/09/Screen-Shot-2012-09-26-at-12.04.16-AM.png" alt="" width="646" height="131" /></a>

At the moment there are no detected legacy tags in any of my blog posts or comments. Lets add one:

<a href="http://localsite.com/ak/wp-content/uploads/2012/09/Screen-Shot-2012-09-26-at-12.04.44-AM.png"><img class="aligncenter size-full wp-image-1010" title="Screen Shot 2012-09-26 at 12.04.44 AM" src="http://localsite.com/ak/wp-content/uploads/2012/09/Screen-Shot-2012-09-26-at-12.04.44-AM.png" alt="" width="678" height="147" /></a>

Now in settings, we see the button available:

<a href="http://localsite.com/ak/wp-content/uploads/2012/09/Screen-Shot-2012-09-26-at-12.04.59-AM.png"><img class="aligncenter size-full wp-image-1011" title="Screen Shot 2012-09-26 at 12.04.59 AM" src="http://localsite.com/ak/wp-content/uploads/2012/09/Screen-Shot-2012-09-26-at-12.04.59-AM.png" alt="" width="617" height="121" /></a>

Clicking it will convert your legacy Crayon tag! Refresh the editor to see the change:

<a href="http://localsite.com/ak/wp-content/uploads/2012/09/Screen-Shot-2012-09-26-at-12.05.32-AM.png"><img class="aligncenter size-full wp-image-1012" title="Screen Shot 2012-09-26 at 12.05.32 AM" src="http://localsite.com/ak/wp-content/uploads/2012/09/Screen-Shot-2012-09-26-at-12.05.32-AM.png" alt="" width="681" height="153" /></a>

And of course, it should look exactly the same on the front end:

<a href="http://localsite.com/ak/wp-content/uploads/2012/09/Screen-Shot-2012-09-26-at-12.05.10-AM.png"><img class="aligncenter size-full wp-image-1013" title="Screen Shot 2012-09-26 at 12.05.10 AM" src="http://localsite.com/ak/wp-content/uploads/2012/09/Screen-Shot-2012-09-26-at-12.05.10-AM.png" alt="" width="672" height="174" /></a>

If you keep using the legacy tags and Crayon is disabled, it looks like this:

<a href="http://localsite.com/ak/wp-content/uploads/2012/09/Screen-Shot-2012-09-26-at-12.26.35-AM.png"><img class="aligncenter size-full wp-image-1014" title="Screen Shot 2012-09-26 at 12.26.35 AM" src="http://localsite.com/ak/wp-content/uploads/2012/09/Screen-Shot-2012-09-26-at-12.26.35-AM.png" alt="" width="666" height="194" /></a>

Since the legacy code is just text in the editor, it looks like text if Crayon isn&#8217;t enabled. The &lt;pre&gt; tag however looks much better as preformatted plain text, and it hides all of your settings in the class attribute.

One warning however, is to <strong>always backup your database before converting your tags</strong> - since this will change your post/comment content it&#8217;s safer to have something to rollback to.

The beta version of Crayon (1.12 at the time of writing) can be <a href="https://github.com/aramkocharyan/crayon-syntax-highlighter/downloads" target="_blank">downloaded from GitHub</a>.

<strong>UPDATE: </strong>As of the latest version, converting legacy tags now has an &#8220;encode&#8221; option. If selected, any legacy tag where the &#8220;decode&#8221; attribute is missing (neither true or false) has its code encoded and decode=&#8221;true&#8221; specified. This is useful if you have been using &lt; and &gt; instead of &amp;lt; and &amp;gt; in your [php] tags for example - this method is dangerous since disabling Crayon will mean these tags will be recognised as HTML tags. So something like this will actually be executed rather than displayed as code:

<code>[html]&lt;script&gt;alert("bam!")&lt;/script&gt;[/html]</code>

The correct approach is to use encoded characters in all your HTML output; including your code snippets.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Crayon with bbPress]]></title>
    <link href="http://aramk.com/blog/2012/09/08/crayon-with-bbpress/"/>
    <updated>2012-09-08T00:00:00+10:00</updated>
    <id>http://aramk.com/blog/2012/09/08/crayon-with-bbpress</id>
    <content type="html"><![CDATA[I&#8217;ve added bbPress support into Crayon since <a href="https://github.com/aramkocharyan/crayon-syntax-highlighter/commit/6f204aaa6d3c3ef1fc90512cc362f5562b91527b" target="_blank">1.11</a>. Make sure you enable the setting <strong>&#8220;Display the Tag Editor in any TinyMCE instances on the frontend&#8221;</strong>, which is off by default from v1.15 to reduce the number of needed resources. This is needed to display the Tag Editor for any other <strong>frontend</strong> TinyMCE editors you may have (including but not limited to those in bbPress).

<a href="http://localsite.com/ak/wp-content/uploads/2012/09/Screen-Shot-2012-09-08-at-1.48.13-AM.png"><img class="aligncenter size-full wp-image-998" title="Screen Shot 2012-09-08 at 1.48.13 AM" src="http://localsite.com/ak/wp-content/uploads/2012/09/Screen-Shot-2012-09-08-at-1.48.13-AM.png" alt="" width="660" height="476" /></a>

<a href="http://localsite.com/ak/wp-content/uploads/2012/09/Screen-Shot-2012-09-08-at-1.48.26-AM.png"><img class="aligncenter size-full wp-image-999" title="Screen Shot 2012-09-08 at 1.48.26 AM" src="http://localsite.com/ak/wp-content/uploads/2012/09/Screen-Shot-2012-09-08-at-1.48.26-AM.png" alt="" width="706" height="643" /></a>

<a href="http://localsite.com/ak/wp-content/uploads/2012/09/Screen-Shot-2012-09-08-at-1.48.43-AM.png"><img class="aligncenter size-full wp-image-1000" title="Screen Shot 2012-09-08 at 1.48.43 AM" src="http://localsite.com/ak/wp-content/uploads/2012/09/Screen-Shot-2012-09-08-at-1.48.43-AM.png" alt="" width="659" height="355" /></a>

I&#8217;d appreciate any bug testing (and fixing?!) from people who use bbPress, since I&#8217;ve made a lot of changes to the Tag Editor javascript in this beta hopefully everything works as smoothly.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Line Ranges in Crayon]]></title>
    <link href="http://aramk.com/blog/2012/09/02/line-ranges-in-crayon/"/>
    <updated>2012-09-02T00:00:00+10:00</updated>
    <id>http://aramk.com/blog/2012/09/02/line-ranges-in-crayon</id>
    <content type="html"><![CDATA[Due to a recent request I&#8217;ve added a feature in Crayon that allows you to specify a line range (e.g. 3-5) of code to include in the Crayon. Only the lines in this range are actually used in the output.

Here&#8217;s the original:

<a href="http://localsite.com/ak/wp-content/uploads/2012/09/Screen-Shot-2012-09-02-at-3.09.37-AM.png"><img class="aligncenter size-full wp-image-987" title="Screen Shot 2012-09-02 at 3.09.37 AM" src="http://localsite.com/ak/wp-content/uploads/2012/09/Screen-Shot-2012-09-02-at-3.09.37-AM.png" alt="" width="652" height="161" /></a>

And with a range:

<a href="http://localsite.com/ak/wp-content/uploads/2012/09/Screen-Shot-2012-09-02-at-3.09.50-AM.png"><img class="aligncenter size-full wp-image-988" title="Screen Shot 2012-09-02 at 3.09.50 AM" src="http://localsite.com/ak/wp-content/uploads/2012/09/Screen-Shot-2012-09-02-at-3.09.50-AM.png" alt="" width="698" height="244" /></a>

<a href="http://localsite.com/ak/wp-content/uploads/2012/09/Screen-Shot-2012-09-02-at-3.10.09-AM.png"><img class="aligncenter size-full wp-image-989" title="Screen Shot 2012-09-02 at 3.10.09 AM" src="http://localsite.com/ak/wp-content/uploads/2012/09/Screen-Shot-2012-09-02-at-3.10.09-AM.png" alt="" width="649" height="57" /></a>

You can also provide the range as a single number and only show one line in the output. This will be released with Crayon 1.10.2, but it&#8217;s available now at <a href="https://github.com/aramkocharyan/crayon-syntax-highlighter/">GitHub</a>.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Current URL in JavaScript]]></title>
    <link href="http://aramk.com/blog/2012/08/25/current-url-in-javascript/"/>
    <updated>2012-08-25T00:00:00+10:00</updated>
    <id>http://aramk.com/blog/2012/08/25/current-url-in-javascript</id>
    <content type="html"><![CDATA[<pre class="lang:js decode:true " data-url="https://raw.github.com/gist/3464169/2f00a1c84684b8bf9eee7da752fa7ad644842bc4/gistfile1.js" ></pre> 
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript Module Pattern]]></title>
    <link href="http://aramk.com/blog/2012/07/28/javascript-module-pattern/"/>
    <updated>2012-07-28T00:00:00+10:00</updated>
    <id>http://aramk.com/blog/2012/07/28/javascript-module-pattern</id>
    <content type="html"><![CDATA[My take on the JavaScript module pattern. I needed to call init() when ready.

<pre class="lang:js decode:true">(function($) {

	window.moduleName = new function() {
		var base = this;

		// Internally visible
		var pvt = '123';

		// Externally visible
		base.init = function() {
			console.log('init');
		};
	};

})(jQuery);

console.log(moduleName.init);</pre>
&nbsp;
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery Blink Effect]]></title>
    <link href="http://aramk.com/blog/2012/07/21/jquery-blink-effect/"/>
    <updated>2012-07-21T00:00:00+10:00</updated>
    <id>http://aramk.com/blog/2012/07/21/jquery-blink-effect</id>
    <content type="html"><![CDATA[This will cause any element to blink, with the option to provide a duration for its disappearance.
<pre class="lang:js decode:true crayon-selected">$.fn.blink = function(time) {
	var time = typeof time == 'undefined' ? 200 : time;
	$(this).hide(0).delay(time).show(0);
}

// Example
$('.something').blink();</pre>
&nbsp;
]]></content>
  </entry>
  
</feed>
